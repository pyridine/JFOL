# Generated by the Waxeye Parser Generator - version 0.8.0
# www.waxeye.org

from waxeye import Edge, State, FA, WaxeyeParser

class Parser (WaxeyeParser):
    start = 0
    eof_check = True
    automata = [FA("sentence", [State([Edge(1, 1, False)], False),
            State([Edge(".", 2, True),
                Edge("?", 2, True),
                Edge("\n", 2, True)], False),
            State([], True)], FA.LEFT),
        FA("expression", [State([Edge(3, 1, False),
                Edge(5, 1, False),
                Edge(7, 1, False),
                Edge(8, 1, False),
                Edge("(", 2, True)], False),
            State([], True),
            State([Edge(2, 3, False)], False),
            State([Edge(15, 4, False)], False),
            State([Edge(1, 5, False)], False),
            State([Edge(")", 1, True)], False)], FA.LEFT),
        FA("negation", [State([Edge(["N", "n"], 1, True)], False),
            State([Edge(["O", "o"], 2, True)], False),
            State([Edge(["T", "t"], 3, True)], False),
            State([], True)], FA.LEFT),
        FA("universal", [State([Edge(4, 1, True)], False),
            State([Edge(15, 2, False)], False),
            State([Edge(13, 3, False)], False),
            State([Edge(15, 4, False)], False),
            State([Edge(1, 5, False)], False),
            State([], True)], FA.LEFT),
        FA("aLLSTR", [State([Edge(["A", "a"], 1, False),
                Edge(["E", "e"], 4, False)], False),
            State([Edge(["L", "l"], 2, False)], False),
            State([Edge(["L", "l"], 3, False)], False),
            State([], True),
            State([Edge(["V", "v"], 5, False)], False),
            State([Edge(["E", "e"], 6, False)], False),
            State([Edge(["R", "r"], 7, False)], False),
            State([Edge(["Y", "y"], 3, False)], False)], FA.VOID),
        FA("existential", [State([Edge(6, 1, True)], False),
            State([Edge(15, 2, False)], False),
            State([Edge(13, 3, False)], False),
            State([Edge(15, 4, False)], False),
            State([Edge(1, 5, False)], False),
            State([], True)], FA.LEFT),
        FA("sOMESTR", [State([Edge(["E", "e"], 1, False),
                Edge(["S", "s"], 7, False)], False),
            State([Edge(["X", "x"], 2, False)], False),
            State([Edge(["I", "i"], 3, False)], False),
            State([Edge(["S", "s"], 4, False)], False),
            State([Edge(["T", "t"], 5, False)], False),
            State([Edge(["S", "s"], 6, False)], False),
            State([], True),
            State([Edge(["O", "o"], 8, False)], False),
            State([Edge(["M", "m"], 9, False)], False),
            State([Edge(["E", "e"], 6, False)], False)], FA.VOID),
        FA("binary", [State([Edge("(", 1, True)], False),
            State([Edge(1, 2, False)], False),
            State([Edge(15, 3, False)], False),
            State([Edge(14, 4, False)], False),
            State([Edge(15, 5, False)], False),
            State([Edge(1, 6, False)], False),
            State([Edge(")", 7, True)], False),
            State([], True)], FA.LEFT),
        FA("relation", [State([Edge([(65, 90)], 1, False)], False),
            State([Edge(["-", (48, 57), (65, 90), "_", (97, 122)], 1, False),
                Edge("[", 2, True)], False),
            State([Edge(10, 3, False)], False),
            State([Edge("]", 4, True)], False),
            State([], True)], FA.LEFT),
        FA("function", [State([Edge([(97, 122)], 1, False)], False),
            State([Edge(["-", (48, 57), (65, 90), "_", (97, 122)], 1, False),
                Edge("[", 2, True)], False),
            State([Edge(10, 3, False)], False),
            State([Edge("]", 4, True)], False),
            State([], True)], FA.LEFT),
        FA("termlist", [State([Edge(11, 1, False)], False),
            State([Edge(",", 2, True)], True),
            State([Edge(10, 3, False)], False),
            State([], True)], FA.LEFT),
        FA("term", [State([Edge(9, 1, False),
                Edge(13, 1, False),
                Edge(12, 1, False)], False),
            State([], True)], FA.PRUNE),
        FA("constant", [State([Edge([(97, 122)], 1, False)], False),
            State([Edge(["-", (48, 57), (65, 90), "_", (97, 122)], 1, False)], True)], FA.LEFT),
        FA("variable", [State([Edge([(65, 90)], 1, False)], False),
            State([Edge(["-", (48, 57), (65, 90), "_", (97, 122)], 1, False)], True)], FA.LEFT),
        FA("binary-symbol", [State([Edge(["A", "a"], 1, False),
                Edge(["O", "o"], 4, False),
                Edge(["I", "i"], 5, False),
                Edge(["E", "e"], 11, False)], False),
            State([Edge(["N", "n"], 2, False)], False),
            State([Edge(["D", "d"], 3, False)], False),
            State([], True),
            State([Edge(["R", "r"], 3, False)], False),
            State([Edge(["M", "m"], 6, False)], False),
            State([Edge(["P", "p"], 7, False)], False),
            State([Edge(["L", "l"], 8, False)], False),
            State([Edge(["I", "i"], 9, False)], False),
            State([Edge(["E", "e"], 10, False)], False),
            State([Edge(["S", "s"], 3, False)], False),
            State([Edge(["Q", "q"], 12, False)], False),
            State([Edge(["U", "u"], 13, False)], False),
            State([Edge(["I", "i"], 14, False)], False),
            State([Edge(["V", "v"], 15, False)], False),
            State([Edge(["A", "a"], 16, False)], False),
            State([Edge(["L", "l"], 17, False)], False),
            State([Edge(["E", "e"], 18, False)], False),
            State([Edge(["N", "n"], 19, False)], False),
            State([Edge(["T", "t"], 3, False)], False)], FA.LEFT),
        FA("wS", [State([Edge(" ", 1, False),
                Edge(15, 2, False)], False),
            State([], True),
            State([Edge(15, 2, False)], True)], FA.VOID)]

    def __init__(self):
        WaxeyeParser.__init__(self, Parser.start, Parser.eof_check, Parser.automata)

